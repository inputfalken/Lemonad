name: $(Build.DefinitionName)-$(date:yyyyMMdd)$(rev:.r)
resources:
- repo: self
trigger: none


variables:
  buildConfiguration: 'Release'

phases:
- phase: Phase_1
  displayName: Windows
  condition: succeededOrFailed()
  queue:
    name: Hosted VS2017
  steps:

  - script: dotnet build --configuration $(buildConfiguration)
    displayName: 'Dotnet $(buildConfiguration) Build'
  - script: |
        mkdir $(Build.SourcesDirectory)\results
        dotnet test -l trx -r "$(Build.SourcesDirectory)\results" /p:CollectCoverage=true /p:CoverletOutput="$(Build.SourcesDirectory)\results\coverage" test\Lemonad.ErrorHandling.Unit 
        dotnet test -l trx -r "$(Build.SourcesDirectory)\results" /p:CollectCoverage=true /p:CoverletOutput="$(Build.SourcesDirectory)\results\coverage" /p:MergeWith="$(Build.SourcesDirectory)\results\coverage.json" /p:CoverletOutputFormat="cobertura" .\test\Lemonad.ErrorHandling.Integration
        dotnet tool install dotnet-reportgenerator-globaltool --tool-path . --version 4.0.4
        .\reportgenerator "-reports:$(Build.SourcesDirectory)\results\coverage.cobertura.xml" "-targetdir:results" "-reporttypes:HTMLInline;HTMLChart"
    displayName: 'Unit testing'
  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: PublishCodeCoverageResults@1
    inputs:
      summaryFileLocation: $(Build.SourcesDirectory)\results\coverage.cobertura.xml
      reportDirectory: $(Build.SourcesDirectory)\results
      codecoverageTool: cobertura

  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      projects: test\Lemonad.ErrorHandling.Unit\Lemonad.ErrorHandling.Unit.csproj
      publishWebProjects: false
      modifyOutputPath: true
      zipAfterPublish: true



- phase: Phase_2
  displayName: Mac
  condition: succeededOrFailed()
  queue:
    name: Hosted macOS
  steps:
  - task: DotNetCoreCLI@2
    displayName: 'Dotnet $(buildConfiguration) Build'
    inputs:
      projects: |
       src/**/*.csproj
       test/**/*.csproj

      arguments: '--configuration $(buildConfiguration)'


  - task: DotNetCoreCLI@2
    displayName: 'Dotnet $(buildConfiguration) Test'
    inputs:
      command: test

      projects: 'test/Lemonad.ErrorHandling.Unit/**/*.csproj'

      arguments: '--configuration $(buildConfiguration) --no-build'



- phase: Phase_3
  displayName: Ubuntu
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DotNetCoreCLI@2
    displayName: 'Dotnet $(buildConfiguration) Build'
    inputs:
      projects: |
       src/**/*.csproj
       test/**/*.csproj

      arguments: '--configuration $(buildConfiguration)'


  - task: DotNetCoreCLI@2
    displayName: 'Dotnet $(buildConfiguration) Test'
    inputs:
      command: test

      projects: 'test/Lemonad.ErrorHandling.Unit/**/*.csproj'

      arguments: '--configuration $(buildConfiguration) --no-build'
